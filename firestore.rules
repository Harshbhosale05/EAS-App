rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Allow authenticated users to read and write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow access to subcollections within user documents
      match /contacts/{contactId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to user's trips subcollection
      match /trips/{tripId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to events subcollection
      match /events/{eventId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Allow access to guardians subcollection
      match /guardians/{guardianId} {
        allow read: if request.auth != null && (request.auth.uid == userId || request.auth.uid == guardianId);
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow access to the main trips collection
    match /trips/{tripId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 